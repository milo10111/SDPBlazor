@inject ISnackbar Snackbar
@page "/todo";
<h3>ToDo</h3>

<EditForm Model="@_todo" OnValidSubmit="@Add" class="col-md-6 mb-3">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText class="form-control" id="title" @bind-Value="_todo.Title"/>

    <button type="submit" class="btn btn-primary mt-1 ms-2" @onclick="Add" disabled="@(!context.Validate())">
        <span class="oi oi-plus me-2" aria-hidden="true"></span>Add
    </button>
</EditForm>

<ul class="list-groups">
    @foreach(var todo in _todos)
    {
        <li class="list-group-item">
            @todo.Title
            <div class="float-end custom-control custom-checkbox">
                <input type="checkbox" class="form-check-input" id="doneCheckBox" @bind="todo.IsDone">
                <label class="form-check-label" for="doneCheckBox">Done</label>
            </div>    
        </li>
    }
</ul>


@code {
    ToDoItemModel _todo = new ToDoItemModel();

    private void Add()
    {
        if(!string.IsNullOrEmpty(_todo.Title))
        {
            _todos.Add(new ToDoItemModel { Title = _todo.Title });

            Snackbar.Add($"ToDo item {_todo.Title} has been added successfully", Severity.Success);
            //for reseting todo input
            _todo = new ToDoItemModel();
        }
    }

    private List<ToDoItemModel> _todos = new List<ToDoItemModel>
    {
        new ToDoItemModel { IsDone = false, Title = "Poczytac o Blazor"},
        new ToDoItemModel { IsDone = true, Title = "Zaimplementowac przelicznik $ w PLN"}
    };
}
